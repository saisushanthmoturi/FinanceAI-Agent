import axios from 'axios';
import { collection, addDoc, query, where, getDocs, Timestamp } from 'firebase/firestore';
import { db } from '../config/firebase';
import type { ChatMessage, ChatSession } from '../types';

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
// Using the stable Google PaLM 2 Text API (publicly available)
// Note: For production, consider upgrading to Gemini Pro API with proper billing setup
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta2/models/text-bison-001:generateText';

/**
 * Conversational AI Chat Service
 * Multi-lingual support with voice capabilities
 */
export class ChatService {
  /**
   * Send message and get AI response
   */
  async sendMessage(
    userId: string,
    message: string,
    language: string = 'en',
    sessionId?: string
  ): Promise<{ response: string; session: ChatSession }> {
    try {
      // Get or create session
      let session: ChatSession;
      if (sessionId) {
        session = await this.getSession(sessionId);
      } else {
        session = await this.createSession(userId, language);
      }

      // Add user message
      const userMessage: ChatMessage = {
        id: Math.random().toString(36).substr(2, 9),
        role: 'user',
        content: message,
        timestamp: new Date(),
        language,
      };

      let aiResponse: string;

      // Check if API is configured
      if (!GEMINI_API_KEY || GEMINI_API_KEY.includes('your_')) {
        console.warn('Gemini API key not configured, using fallback response');
        aiResponse = this.getFallbackResponse(message, language);
      } else {
        try {
          // Build context from session history
          const context = session.messages.slice(-6).map(m => 
            `${m.role}: ${m.content}`
          ).join('\n');

          // Prepare prompt with financial context
          const prompt = `
You are an AI financial advisor for an Indian user. Provide helpful, accurate financial guidance.

Context:
${context}

User (${language}): ${message}

Provide a clear, empathetic response. If the user is asking in Hindi, Telugu, Tamil, or other Indian languages, respond in that language. Include:
1. Direct answer to the question
2. Relevant financial advice
3. Actionable steps if applicable
4. Compliance with RBI guidelines

Keep the response concise (2-3 paragraphs max).
`;

          // Call Gemini API
          const response = await axios.post(
            `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
            {
              contents: [{
                parts: [{ text: prompt }]
              }],
              generationConfig: {
                temperature: 0.8,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 512,
              },
              safetySettings: [
                {
                  category: 'HARM_CATEGORY_HARASSMENT',
                  threshold: 'BLOCK_MEDIUM_AND_ABOVE'
                },
                {
                  category: 'HARM_CATEGORY_HATE_SPEECH',
                  threshold: 'BLOCK_MEDIUM_AND_ABOVE'
                }
              ]
            },
            {
              headers: {
                'Content-Type': 'application/json',
              },
              timeout: 15000, // 15 second timeout for chat
            }
          );

          aiResponse = response.data.candidates[0].content.parts[0].text;
        } catch (apiError: any) {
          console.error('Gemini API error:', apiError);
          if (apiError.response) {
            console.error('API Error Status:', apiError.response.status);
            console.error('API Error Data:', apiError.response.data);
          }
          
          // Use fallback on API error
          aiResponse = this.getFallbackResponse(message, language);
        }
      }

      // Add assistant message
      const assistantMessage: ChatMessage = {
        id: Math.random().toString(36).substr(2, 9),
        role: 'assistant',
        content: aiResponse,
        timestamp: new Date(),
        language,
      };

      // Update session
      session.messages.push(userMessage, assistantMessage);
      session.lastMessageAt = new Date();

      // Save to Firestore
      try {
        await addDoc(collection(db, 'messages'), {
          sessionId: session.id,
          ...userMessage,
          timestamp: Timestamp.now(),
        });

        await addDoc(collection(db, 'messages'), {
          sessionId: session.id,
          ...assistantMessage,
          timestamp: Timestamp.now(),
        });
      } catch (dbError) {
        console.error('Error saving messages to Firestore:', dbError);
        // Continue even if DB save fails - messages are in session object
      }

      return { response: aiResponse, session };
    } catch (error) {
      console.error('Error sending message:', error);
      throw error;
    }
  }

  /**
   * Get fallback response when API is unavailable
   * Enhanced to handle custom salary-based and complex financial queries
   */
  private getFallbackResponse(message: string, language: string): string {
    const lowerMessage = message.toLowerCase();
    
    // Extract salary if mentioned (supports formats like: 20000, 20,000, ‚Çπ20000, Rs 20000)
    const salaryMatch = message.match(/(?:‚Çπ|rs\.?|inr)?\s?(\d{1,3}(?:,\d{3})*|\d+)/i);
    const salary = salaryMatch ? parseInt(salaryMatch[1].replace(/,/g, '')) : null;
    
    // Salary-based saving/budgeting queries
    if ((lowerMessage.includes('save') || lowerMessage.includes('saving') || lowerMessage.includes('‡§¨‡§ö‡§§')) && salary) {
      const emergencyFund = Math.round(salary * 3);
      const monthlySaving = Math.round(salary * 0.2);
      const needs = Math.round(salary * 0.5);
      const wants = Math.round(salary * 0.3);
      
      if (language === 'hi') {
        return `‡§Ü‡§™‡§ï‡•Ä ‚Çπ${salary.toLocaleString('en-IN')} ‡§ï‡•Ä ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§ö‡§§ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ:\n\n` +
               `üìä 50-30-20 ‡§®‡§ø‡§Ø‡§Æ:\n` +
               `‚Ä¢ ‡§ú‡§∞‡•Ç‡§∞‡§§‡•á‡§Ç (50%): ‚Çπ${needs.toLocaleString('en-IN')} - ‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ, ‡§≠‡•ã‡§ú‡§®, ‡§¨‡§ø‡§≤\n` +
               `‚Ä¢ ‡§á‡§ö‡•ç‡§õ‡§æ‡§è‡§Ç (30%): ‚Çπ${wants.toLocaleString('en-IN')} - ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§®, ‡§¨‡§æ‡§π‡§∞ ‡§ñ‡§æ‡§®‡§æ\n` +
               `‚Ä¢ ‡§¨‡§ö‡§§ (20%): ‚Çπ${monthlySaving.toLocaleString('en-IN')} - ‡§®‡§ø‡§µ‡•á‡§∂ ‡§î‡§∞ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§®‡§ø‡§ß‡§ø\n\n` +
               `üéØ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø:\n` +
               `‚Ä¢ 3 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§®‡§ø‡§ß‡§ø: ‚Çπ${emergencyFund.toLocaleString('en-IN')}\n` +
               `‚Ä¢ SIP ‡§Æ‡•á‡§Ç ‚Çπ${Math.round(monthlySaving * 0.6).toLocaleString('en-IN')} ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\n` +
               `‚Ä¢ RD/PPF ‡§Æ‡•á‡§Ç ‚Çπ${Math.round(monthlySaving * 0.4).toLocaleString('en-IN')} ‡§∞‡§ñ‡•á‡§Ç\n\n` +
               `üí° ‡§ü‡§ø‡§™‡•ç‡§∏: ‡§ñ‡§∞‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç, ‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡§¨‡•ç‡§∏‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§ï‡§æ‡§ü‡•á‡§Ç, ‡§∏‡•Ä‡§ß‡•á ‡§¨‡•à‡§Ç‡§ï ‡§∏‡•á ‡§¨‡§ö‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§`;
      } else {
        return `Here's a savings plan for your ‚Çπ${salary.toLocaleString('en-IN')} salary:\n\n` +
               `üìä 50-30-20 Rule:\n` +
               `‚Ä¢ Needs (50%): ‚Çπ${needs.toLocaleString('en-IN')} - rent, food, bills\n` +
               `‚Ä¢ Wants (30%): ‚Çπ${wants.toLocaleString('en-IN')} - entertainment, dining out\n` +
               `‚Ä¢ Savings (20%): ‚Çπ${monthlySaving.toLocaleString('en-IN')} - investments & emergency fund\n\n` +
               `üéØ Goals:\n` +
               `‚Ä¢ Build emergency fund in 3 months: ‚Çπ${emergencyFund.toLocaleString('en-IN')}\n` +
               `‚Ä¢ Start SIP with ‚Çπ${Math.round(monthlySaving * 0.6).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Keep ‚Çπ${Math.round(monthlySaving * 0.4).toLocaleString('en-IN')} in RD/PPF\n\n` +
               `üí° Tips: Track expenses, cut subscriptions, automate savings from salary.`;
      }
    }
    
    // Budget planning with salary
    if ((lowerMessage.includes('budget') || lowerMessage.includes('plan') || lowerMessage.includes('‡§¨‡§ú‡§ü')) && salary) {
      const needs = Math.round(salary * 0.5);
      const wants = Math.round(salary * 0.3);
      const savings = Math.round(salary * 0.2);
      
      if (language === 'hi') {
        return `‚Çπ${salary.toLocaleString('en-IN')} ‡§ï‡•Ä ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ú‡§ü:\n\n` +
               `üè† ‡§ú‡§∞‡•Ç‡§∞‡§§‡•á‡§Ç (50% = ‚Çπ${needs.toLocaleString('en-IN')}):\n` +
               `‚Ä¢ ‡§ï‡§ø‡§∞‡§æ‡§Ø‡§æ/EMI: ‚Çπ${Math.round(needs * 0.4).toLocaleString('en-IN')}\n` +
               `‚Ä¢ ‡§≠‡•ã‡§ú‡§®: ‚Çπ${Math.round(needs * 0.25).toLocaleString('en-IN')}\n` +
               `‚Ä¢ ‡§¨‡§ø‡§≤/‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§: ‚Çπ${Math.round(needs * 0.35).toLocaleString('en-IN')}\n\n` +
               `üéØ ‡§á‡§ö‡•ç‡§õ‡§æ‡§è‡§Ç (30% = ‚Çπ${wants.toLocaleString('en-IN')}):\n` +
               `‚Ä¢ ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§®: ‚Çπ${Math.round(wants * 0.4).toLocaleString('en-IN')}\n` +
               `‚Ä¢ ‡§∂‡•â‡§™‡§ø‡§Ç‡§ó: ‚Çπ${Math.round(wants * 0.35).toLocaleString('en-IN')}\n` +
               `‚Ä¢ ‡§¨‡§æ‡§π‡§∞ ‡§ñ‡§æ‡§®‡§æ: ‚Çπ${Math.round(wants * 0.25).toLocaleString('en-IN')}\n\n` +
               `üí∞ ‡§¨‡§ö‡§§ (20% = ‚Çπ${savings.toLocaleString('en-IN')}):\n` +
               `‚Ä¢ ‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° SIP: ‚Çπ${Math.round(savings * 0.5).toLocaleString('en-IN')}\n` +
               `‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§®‡§ø‡§ß‡§ø: ‚Çπ${Math.round(savings * 0.3).toLocaleString('en-IN')}\n` +
               `‚Ä¢ ‡§¨‡•Ä‡§Æ‡§æ: ‚Çπ${Math.round(savings * 0.2).toLocaleString('en-IN')}`;
      } else {
        return `Monthly budget for ‚Çπ${salary.toLocaleString('en-IN')} salary:\n\n` +
               `üè† Needs (50% = ‚Çπ${needs.toLocaleString('en-IN')}):\n` +
               `‚Ä¢ Rent/EMI: ‚Çπ${Math.round(needs * 0.4).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Food: ‚Çπ${Math.round(needs * 0.25).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Bills/Transport: ‚Çπ${Math.round(needs * 0.35).toLocaleString('en-IN')}\n\n` +
               `üéØ Wants (30% = ‚Çπ${wants.toLocaleString('en-IN')}):\n` +
               `‚Ä¢ Entertainment: ‚Çπ${Math.round(wants * 0.4).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Shopping: ‚Çπ${Math.round(wants * 0.35).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Dining out: ‚Çπ${Math.round(wants * 0.25).toLocaleString('en-IN')}\n\n` +
               `üí∞ Savings (20% = ‚Çπ${savings.toLocaleString('en-IN')}):\n` +
               `‚Ä¢ Mutual Fund SIP: ‚Çπ${Math.round(savings * 0.5).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Emergency fund: ‚Çπ${Math.round(savings * 0.3).toLocaleString('en-IN')}\n` +
               `‚Ä¢ Insurance: ‚Çπ${Math.round(savings * 0.2).toLocaleString('en-IN')}`;
      }
    }
    
    // Common financial queries with fallback responses
    if (lowerMessage.includes('budget') || lowerMessage.includes('‡§¨‡§ú‡§ü')) {
      return language === 'hi' 
        ? '‡§¨‡§ú‡§ü ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Ø ‡§ï‡§æ 50% ‡§ú‡§∞‡•Ç‡§∞‡§§‡•ã‡§Ç ‡§™‡§∞, 30% ‡§á‡§ö‡•ç‡§õ‡§æ‡§ì‡§Ç ‡§™‡§∞, ‡§î‡§∞ 20% ‡§¨‡§ö‡§§ ‡§™‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ø‡§π 50-30-20 ‡§®‡§ø‡§Ø‡§Æ ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§§‡•ç‡§§ ‡§ï‡•ã ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§∞‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§'
        : 'For budgeting, try the 50-30-20 rule: spend 50% of your income on needs, 30% on wants, and 20% on savings. This helps maintain financial balance.';
    }
    
    if (lowerMessage.includes('save') || lowerMessage.includes('savings') || lowerMessage.includes('‡§¨‡§ö‡§§')) {
      return language === 'hi'
        ? '‡§¨‡§ö‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n1. ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§®‡§ø‡§ß‡§ø (3-6 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡•á ‡§ñ‡§∞‡•ç‡§ö)\n2. ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§ï‡§æ 20% ‡§∏‡•ç‡§µ‡§§‡§É ‡§¨‡§ö‡§§ ‡§ï‡§∞‡•á‡§Ç\n3. ‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° SIP ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç\n4. PPF/SSY ‡§ú‡•à‡§∏‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§ö‡•Å‡§®‡•á‡§Ç\n5. ‡§ñ‡§∞‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•ã ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç'
        : 'To start saving:\n1. Build emergency fund (3-6 months expenses)\n2. Automate 20% of salary to savings\n3. Invest in mutual fund SIPs\n4. Use government schemes (PPF/SSY)\n5. Track and reduce expenses';
    }
    
    if (lowerMessage.includes('invest') || lowerMessage.includes('‡§®‡§ø‡§µ‡•á‡§∂')) {
      return language === 'hi'
        ? '‡§®‡§ø‡§µ‡•á‡§∂ ‡§ó‡§æ‡§á‡§°:\n\nüéØ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä:\n‚Ä¢ ‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° SIP (‚Çπ500 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç)\n‚Ä¢ PPF (‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§, ‡§ï‡§∞ ‡§Æ‡•Å‡§ï‡•ç‡§§)\n‚Ä¢ ‡§ó‡•ã‡§≤‡•ç‡§° ETF\n\nüíº ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ:\n‚Ä¢ ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§∏‡•ç‡§ü‡•â‡§ï\n‚Ä¢ ‡§ï‡•â‡§∞‡•ç‡§™‡•ã‡§∞‡•á‡§ü ‡§¨‡•â‡§®‡•ç‡§°\n‚Ä¢ REIT\n\n‚ö†Ô∏è ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç:\n‚Ä¢ ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§≤‡§Ç‡§¨‡•Ä ‡§Ö‡§µ‡§ß‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡§π‡§®‡§∂‡•Ä‡§≤‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç'
        : 'Investment Guide:\n\nüéØ Beginners:\n‚Ä¢ Mutual Fund SIPs (start ‚Çπ500)\n‚Ä¢ PPF (safe, tax-free)\n‚Ä¢ Gold ETFs\n\nüíº Moderate Risk:\n‚Ä¢ Direct stocks\n‚Ä¢ Corporate bonds\n‚Ä¢ REITs\n\n‚ö†Ô∏è Remember:\n‚Ä¢ Diversify portfolio\n‚Ä¢ Invest long-term\n‚Ä¢ Check risk tolerance';
    }
    
    if (lowerMessage.includes('tax') || lowerMessage.includes('‡§ï‡§∞')) {
      return language === 'hi'
        ? '‡§ï‡§∞ ‡§¨‡§ö‡§§ ‡§ï‡•á ‡§§‡§∞‡•Ä‡§ï‡•á:\n\nüìã ‡§ß‡§æ‡§∞‡§æ 80C (‚Çπ1.5 ‡§≤‡§æ‡§ñ):\n‚Ä¢ PPF, EPF, ELSS\n‚Ä¢ ‡§ú‡•Ä‡§µ‡§® ‡§¨‡•Ä‡§Æ‡§æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ\n‚Ä¢ ‡§π‡•ã‡§Æ ‡§≤‡•ã‡§® ‡§Æ‡•Ç‡§≤‡§ß‡§®\n\nüè• ‡§ß‡§æ‡§∞‡§æ 80D:\n‚Ä¢ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡•Ä‡§Æ‡§æ (‚Çπ25,000-50,000)\n\nüí∞ ‡§Ö‡§®‡•ç‡§Ø:\n‚Ä¢ NPS (‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‚Çπ50,000)\n‚Ä¢ ‡§π‡•ã‡§Æ ‡§≤‡•ã‡§® ‡§¨‡•ç‡§Ø‡§æ‡§ú (‚Çπ2 ‡§≤‡§æ‡§ñ)\n‚Ä¢ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ã‡§£ ‡§¨‡•ç‡§Ø‡§æ‡§ú\n\n‚ö° ‡§®‡§à ‡§ï‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ: ‡§ï‡§Æ ‡§¶‡§∞‡•á‡§Ç, ‡§ï‡•ã‡§à ‡§ï‡§ü‡•å‡§§‡•Ä ‡§®‡§π‡•Ä‡§Ç'
        : 'Tax Saving Options:\n\nüìã Section 80C (‚Çπ1.5 lakh):\n‚Ä¢ PPF, EPF, ELSS\n‚Ä¢ Life insurance premium\n‚Ä¢ Home loan principal\n\nüè• Section 80D:\n‚Ä¢ Health insurance (‚Çπ25k-50k)\n\nüí∞ Others:\n‚Ä¢ NPS (additional ‚Çπ50k)\n‚Ä¢ Home loan interest (‚Çπ2 lakh)\n‚Ä¢ Education loan interest\n\n‚ö° New tax regime: Lower rates, no deductions';
    }
    
    if (lowerMessage.includes('retire') || lowerMessage.includes('pension') || lowerMessage.includes('‡§∏‡•á‡§µ‡§æ‡§®‡§ø‡§µ‡•É‡§§‡•ç‡§§‡§ø')) {
      return language === 'hi'
        ? '‡§∏‡•á‡§µ‡§æ‡§®‡§ø‡§µ‡•É‡§§‡•ç‡§§‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ:\n\nüí∞ ‡§ï‡•â‡§∞‡•ç‡§™‡§∏ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ:\n‚Ä¢ 25-30x ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§ñ‡§∞‡•ç‡§ö\n‚Ä¢ ‡§Æ‡•Å‡§¶‡•ç‡§∞‡§æ‡§∏‡•ç‡§´‡•Ä‡§§‡§ø ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç\n\nüìä ‡§®‡§ø‡§µ‡•á‡§∂ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™:\n‚Ä¢ NPS (‡§ï‡§∞ ‡§≤‡§æ‡§≠ + ‡§™‡•á‡§Ç‡§∂‡§®)\n‚Ä¢ PPF (‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ø‡§ü‡§∞‡•ç‡§®)\n‚Ä¢ ‡§Æ‡•ç‡§Ø‡•Ç‡§ö‡•Å‡§Ö‡§≤ ‡§´‡§Ç‡§° SIP\n‚Ä¢ EPF/VPF\n\nüéØ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§:\n‚Ä¢ ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç (30 ‡§ï‡•á ‡§¶‡§∂‡§ï ‡§Æ‡•á‡§Ç)\n‚Ä¢ ‡§Ü‡§Ø ‡§ï‡§æ 15-20% ‡§¨‡§ö‡§æ‡§è‡§Ç\n‚Ä¢ ‡§π‡§∞ 5 ‡§∏‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç'
        : 'Retirement Planning:\n\nüí∞ Corpus needed:\n‚Ä¢ 25-30x annual expenses\n‚Ä¢ Factor in inflation\n\nüìä Investment options:\n‚Ä¢ NPS (tax benefit + pension)\n‚Ä¢ PPF (safe returns)\n‚Ä¢ Mutual fund SIPs\n‚Ä¢ EPF/VPF\n\nüéØ Getting started:\n‚Ä¢ Start early (in 30s)\n‚Ä¢ Save 15-20% of income\n‚Ä¢ Review every 5 years';
    }
    
    if (lowerMessage.includes('loan') || lowerMessage.includes('emi') || lowerMessage.includes('‡§ã‡§£')) {
      return language === 'hi'
        ? '‡§ã‡§£ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®:\n\n‚úÖ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ã‡§£:\n‚Ä¢ ‡§ó‡•É‡§π ‡§ã‡§£ (‡§∏‡§Ç‡§™‡§§‡•ç‡§§‡§ø ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£)\n‚Ä¢ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ã‡§£ (‡§ï‡§∞‡§ø‡§Ø‡§∞)\n\n‚ùå ‡§¨‡•Å‡§∞‡§æ ‡§ã‡§£:\n‚Ä¢ ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ã‡§£\n‚Ä¢ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ã‡§£ ‡§∂‡•â‡§™‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è\n\nüìä EMI ‡§®‡§ø‡§Ø‡§Æ:\n‚Ä¢ ‡§ï‡•Å‡§≤ EMI < 40% ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Ø\n‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§ã‡§£ ‡§™‡§π‡§≤‡•á ‡§ö‡•Å‡§ï‡§æ‡§è‡§Ç\n‚Ä¢ ‡§™‡•ç‡§∞‡•Ä‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç\n\nüí° ‡§ü‡§ø‡§™: ‡§ã‡§£ ‡§≤‡•á‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§®‡§ø‡§ß‡§ø ‡§¨‡§®‡§æ‡§è‡§Ç'
        : 'Loan Management:\n\n‚úÖ Good debt:\n‚Ä¢ Home loan (asset building)\n‚Ä¢ Education loan (career)\n\n‚ùå Bad debt:\n‚Ä¢ Credit card debt\n‚Ä¢ Personal loans for shopping\n\nüìä EMI rule:\n‚Ä¢ Total EMI < 40% monthly income\n‚Ä¢ Pay high-interest debt first\n‚Ä¢ Consider prepayment\n\nüí° Tip: Build emergency fund before loans';
    }
    
    if (lowerMessage.includes('insurance') || lowerMessage.includes('‡§¨‡•Ä‡§Æ‡§æ')) {
      return language === 'hi'
        ? '‡§¨‡•Ä‡§Æ‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç:\n\nüè• ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¨‡•Ä‡§Æ‡§æ:\n‚Ä¢ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‚Çπ5-10 ‡§≤‡§æ‡§ñ\n‚Ä¢ ‡§ï‡•à‡§∂‡§≤‡•á‡§∏ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï\n‚Ä¢ OPD ‡§ï‡§µ‡§∞‡•á‡§ú ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç\n\nüë§ ‡§ú‡•Ä‡§µ‡§® ‡§¨‡•Ä‡§Æ‡§æ:\n‚Ä¢ ‡§ü‡§∞‡•ç‡§Æ ‡§á‡§Ç‡§∂‡•ç‡§Ø‡•ã‡§∞‡•á‡§Ç‡§∏ (‡§Ü‡§Ø ‡§ï‡§æ 10-15x)\n‚Ä¢ ‡§ï‡§Æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ, ‡§â‡§ö‡•ç‡§ö ‡§ï‡§µ‡§∞\n‚Ä¢ LIC/‡§®‡§ø‡§ú‡•Ä ‡§ï‡§Ç‡§™‡§®‡§ø‡§Ø‡§æ‡§Ç\n\nüí° ‡§ü‡§ø‡§™: ‡§®‡§ø‡§µ‡•á‡§∂ ‡§î‡§∞ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ö‡§≤‡§ó ‡§∞‡§ñ‡•á‡§Ç‡•§ ULIPs ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§'
        : 'Insurance Needs:\n\nüè• Health Insurance:\n‚Ä¢ ‚Çπ5-10 lakh family cover\n‚Ä¢ Cashless hospital network\n‚Ä¢ Consider OPD coverage\n\nüë§ Life Insurance:\n‚Ä¢ Term insurance (10-15x income)\n‚Ä¢ Low premium, high cover\n‚Ä¢ LIC/private companies\n\nüí° Tip: Keep investment & insurance separate. Avoid ULIPs.';
    }
    
    // Generic helpful response
    return language === 'hi'
      ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§î‡§∞ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç:\n\nüí° ‡§Æ‡•à‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n‚Ä¢ ‡§¨‡§ú‡§ü ‡§Ø‡•ã‡§ú‡§®‡§æ (‡§Ö‡§™‡§®‡•Ä ‡§∏‡•à‡§≤‡§∞‡•Ä ‡§¨‡§§‡§æ‡§è‡§Ç)\n‚Ä¢ ‡§¨‡§ö‡§§ ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡§æ‡§Ç\n‚Ä¢ ‡§®‡§ø‡§µ‡•á‡§∂ ‡§∏‡•Å‡§ù‡§æ‡§µ\n‚Ä¢ ‡§ï‡§∞ ‡§¨‡§ö‡§§\n‚Ä¢ ‡§∏‡•á‡§µ‡§æ‡§®‡§ø‡§µ‡•É‡§§‡•ç‡§§‡§ø ‡§Ø‡•ã‡§ú‡§®‡§æ\n‚Ä¢ ‡§ã‡§£ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®\n‚Ä¢ ‡§¨‡•Ä‡§Æ‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®\n\nüîë ‡§¨‡•á‡§π‡§§‡§∞ AI ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è Gemini API ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§'
      : 'I\'m here to help with your financial questions. Please provide more details:\n\nüí° I can help with:\n‚Ä¢ Budget planning (mention your salary)\n‚Ä¢ Saving strategies\n‚Ä¢ Investment advice\n‚Ä¢ Tax savings\n‚Ä¢ Retirement planning\n‚Ä¢ Loan management\n‚Ä¢ Insurance guidance\n\nüîë For better AI responses, configure your Gemini API key.';
  }

  /**
   * Create new chat session
   */
  async createSession(userId: string, language: string): Promise<ChatSession> {
    const session: Omit<ChatSession, 'id'> = {
      userId,
      messages: [],
      startedAt: new Date(),
      lastMessageAt: new Date(),
      language,
    };

    const docRef = await addDoc(collection(db, 'chat_sessions'), {
      ...session,
      startedAt: Timestamp.now(),
      lastMessageAt: Timestamp.now(),
    });

    return {
      id: docRef.id,
      ...session,
    };
  }

  /**
   * Get chat session
   */
  async getSession(sessionId: string): Promise<ChatSession> {
    try {
      // Simple query without orderBy to avoid composite index requirement
      const messagesQuery = query(
        collection(db, 'messages'),
        where('sessionId', '==', sessionId)
      );

      const querySnapshot = await getDocs(messagesQuery);
      const messages: ChatMessage[] = [];

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        messages.push({
          id: doc.id,
          ...data,
          timestamp: data.timestamp.toDate(),
        } as ChatMessage);
      });

      // Sort messages in memory instead of in the query
      messages.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

      return {
        id: sessionId,
        userId: messages[0]?.role === 'user' ? 'user' : '',
        messages,
        startedAt: messages[0]?.timestamp || new Date(),
        lastMessageAt: messages[messages.length - 1]?.timestamp || new Date(),
        language: messages[0]?.language || 'en',
      };
    } catch (error) {
      console.error('Error getting session from Firestore:', error);
      // Return empty session if Firestore fails
      return {
        id: sessionId,
        userId: '',
        messages: [],
        startedAt: new Date(),
        lastMessageAt: new Date(),
        language: 'en',
      };
    }
  }

  /**
   * Get user's chat sessions
   */
  async getUserSessions(userId: string): Promise<ChatSession[]> {
    try {
      // Simple query without orderBy to avoid composite index requirement
      const q = query(
        collection(db, 'chat_sessions'),
        where('userId', '==', userId)
      );

      const querySnapshot = await getDocs(q);
      const sessions: ChatSession[] = [];

      for (const docSnap of querySnapshot.docs) {
        // Load full session with messages
        const session = await this.getSession(docSnap.id);
        sessions.push(session);
      }

      // Sort sessions in memory instead of in the query
      sessions.sort((a, b) => b.lastMessageAt.getTime() - a.lastMessageAt.getTime());

      return sessions;
    } catch (error) {
      console.error('Error getting user sessions from Firestore:', error);
      // Return empty array if Firestore fails
      return [];
    }
  }

  /**
   * Process voice input (speech-to-text)
   */
  async processVoiceInput(_audioBlob: Blob, _language: string): Promise<string> {
    // In production, integrate with Google Speech-to-Text API
    // For now, return placeholder
    console.warn('Voice input processing not yet implemented - integrate Google Speech-to-Text API');
    return 'Voice input processing - integrate Google Speech-to-Text API';
  }

  /**
   * Convert text to speech
   */
  async textToSpeech(_text: string, _language: string): Promise<Blob> {
    // In production, integrate with Google Text-to-Speech API
    // For now, return placeholder
    console.warn('Text-to-speech not yet implemented - integrate Google Text-to-Speech API');
    return new Blob();
  }
}

export const chatService = new ChatService();
